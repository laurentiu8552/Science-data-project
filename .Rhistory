"Bed Linen",
"Bed Linen",
"Bed Linen",
"Bed Linen",
"Mattresses",
"Bed Linen",
"Mattresses",
"Bed Linen",
"Bed Linen",
"Mattresses",
"Bed Linen",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"Furniture",
"Furniture",
"Textiles",
"Bathroom",
"Bed Linen",
"Mattresses",
"Mattresses",
"Mattresses",
"Bed Linen",
"Bed Linen",
"Mattresses",
"Mattresses",
"Furniture",
"Mattresses",
"Mattresses",
"Mattresses",
"Furniture",
"Furniture",
"Textiles",
"Mattresses",
"Bed Linen",
"Furniture",
"Homeware",
"Garden",
"Bed Linen",
"Bed Linen",
"Mattresses",
"Mattresses",
"Mattresses",
"Textiles",
"Mattresses",
"Mattresses",
"Bed Linen",
"Mattresses",
"Furniture",
"Furniture",
"Furniture",
"Furniture",
"Mattresses",
"Mattresses",
"Mattresses",
"Bed Linen",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"Bathroom",
"Textiles",
"Mattresses",
"Mattresses",
"Furniture",
"Furniture",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses"
)
# c, define the 'product_category_level_2' vector --------
product_category_level_2 <- c(
"mirror",
"Mattresses",
"sofa bed",
"bed frame",
"bed frame",
"Towel",
"Mattresses",
"top mattress",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"dining chair",
"Mattresses",
"Mattresses",
"Mattresses",
"Bed Linen",
"pouffe",
"Bed Linen",
"Towel",
"Mattresses",
"desk",
"Towel",
"Mattresses",
"bed frame",
"Towel",
"Sheets",
"Mattresses",
"Towel",
"footstool",
"bed frame",
"Mattresses",
"Mattresses",
"shelving unit",
"Mattresses",
"Mattresses",
"Mattresses",
"Curtain",
"Sheets",
"Mattresses",
"Towel",
"Sheets",
"Mattresses",
"top mattress",
"bed frame",
"TableTextile",
"bed frame",
"wardrobe",
"bed frame",
"Mattresses",
"top mattress",
"Mattresses",
"Mattresses",
"top mattress",
"Mattresses",
"Sheets",
"Sheets",
"sofa bed",
"Mattresses",
"stool",
"Mattresses",
"Towel",
"TableTextile",
"Sheets",
"Sheets",
"Pillow",
"Mattresses",
"Decoration",
"pouffe",
"shelving unit",
"Mattresses",
"Towel",
"Sheets",
"Mattresses",
"top mattress",
"Sheets",
"Sheets",
"Bed Linen",
"Mattresses",
"Sheets",
"Towel",
"Accessorries",
"nest of tables",
"continental bed",
"Mattresses",
"Mattresses",
"chest of drawers",
"Towel",
"continental bed",
"Mattresses",
"Mattresses",
"Mattresses",
"Bed Linen",
"Bed Linen",
"Decoration",
"Sheets",
"sofa bed",
"desk",
"Towel",
"Sheets",
"Sheets",
"top mattress",
"Mattresses",
"bed frame",
"pouffe",
"Mattresses",
"Mattresses",
"bench",
"Bed Linen",
"Mattresses",
"bed frame",
"Sheets",
"pouffe",
"Sheets",
"Pillow",
"Mattresses",
"Mattresses",
"Mattresses",
"sofa bed",
"Sheets",
"Mattresses",
"Garden table",
"Curtain",
"armchair",
"Mattresses",
"top mattress",
"Sheets",
"Decoration",
"Sheets",
"Sheets",
"Bed Linen",
"Bed Linen",
"Sheets",
"top mattress",
"Sheets",
"Mattresses",
"Bed Linen",
"Bed Linen",
"continental bed",
"Bed Linen",
"Mattresses",
"Mattresses",
"Mattresses",
"Mattresses",
"chest of drawers",
"pedestal",
"Curtain",
"Towel",
"Bed Linen",
"Accessorries",
"Mattresses",
"Accessorries",
"Sheets",
"Bed Linen",
"Accessorries",
"Mattresses",
"shelving unit",
"continental bed",
"Accessorries",
"Mattresses",
"decoration",
"nest of tables",
"Curtain",
"Mattresses",
"Bed Linen",
"bedside table",
"lamp",
"Garden cushion",
"Bed Linen",
"Bed Linen",
"top mattress",
"Mattresses",
"Accessorries",
"Curtain",
"Accessorries",
"continental bed",
"Bed Linen",
"Mattresses",
"office chair",
"sofa bed with chaise longue",
"dining chair",
"dining chair",
"Accessorries",
"Accessorries",
"Accessorries",
"Bed Linen",
"top mattress",
"Accessorries",
"top mattress",
"Mattresses",
"top mattress",
"Towel",
"TableTextile",
"Mattresses",
"Accessorries",
"sofa bed",
"Decoration",
"Accessorries",
"top mattress",
"Mattresses",
"Mattresses",
"Mattresses"
)
# d, combine all three vectors into a data frame named 'lookup'
lookup <- data.frame(
product_title = product_title,
product_group_level_1 = product_group_level_1,
product_category_level_2 = product_category_level_2,
stringsAsFactors = FALSE
)
# e, Print to confirm
print(lookup, n = nrow(lookup))
# f, now the actual imputation part
# create data_joined by joining data with lookup on product_title
data <- data %>%
left_join(lookup, by = "product_title", suffix = c("", ".lkp")) %>%
# replace NAs in original columns with the lookup columns
mutate(
product_group_level_1 = coalesce(product_group_level_1, product_group_level_1.lkp),
product_category_level_2 = coalesce(product_category_level_2, product_category_level_2.lkp  )
) %>%
# remove the extra lookup columns
dplyr::select(-ends_with(".lkp"))
# Convert the 'date' column to Date type
data$date <- as.Date(data$date, format = "%d.%m.%Y")
# Convert all non-numeric columns (besides 'date') to factors
data[] <- lapply(data, function(x) if(is.character(x)) as.factor(x) else x)
# Impute NA customer id's with 999999999 for now. Will be removed in CLV probably
data <- data %>%
mutate(customer_id = replace_na(customer_id, 9999999999))
sum(is.na(data))
skimr::skim(data)
#Visualization of the 3 rfm variables
# Revenue histogram
hist(data_clean_rfm$revenue, main = "Histogram of Revenue", col = "blue", border = "black")
#Visualization of the 3 rfm variables
data_clean_rfm = data
# Revenue histogram
hist(data_clean_rfm$revenue, main = "Histogram of Revenue", col = "blue", border = "black")
# Check for NAs
sum(is.na(data_clean_rfm$revenue))      # Count NAs in revenue
# Customer ID bar plot - Delete later, useless, including the NA checks
cust_freq <- table(data_clean_rfm$customer_id[data_clean_rfm$customer_id != 9999999999])
# Filter to only those with frequency >= 10
cust_freq_filtered <- cust_freq[cust_freq >= 35]
barplot(cust_freq_filtered, main = "Customer ID Distribution", col = "blue", las = 2, ylim = c(0, 80))
# Date bar plot
barplot(table(data_clean_rfm$date), main = "Date Distribution", col = "blue")
sum(is.na(data_clean_rfm$date))         # Count NAs in date
#CAN BE SEEN no NAs and also no negative variables, can proceed with the RFM model running
#RFM model
analysis_date = as.Date("2024-12-31")
# Run the RFM analysis
rfm_result <- rfm_table_order(data_clean_rfm,
customer_id,
date,
revenue,
analysis_date = analysis_date)
# Step 3: Visualize RFM Results
# Heatmap visualization of RFM scores
rfm_plot_heatmap(rfm_result)
# Bar chart of RFM scores
rfm_bar_chart(rfm_result)
# Step 4: Segment Customers based on RFM scores
# Define RFM segment categories
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# Set upper and lower bounds for Recency, Frequency, and Monetary
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# Apply segments based on RFM scores
segment <- rfm_segment(rfm_result,
segment_names,
recency_lower, recency_upper,
frequency_lower, frequency_upper,
monetary_lower, monetary_upper)
# View the segmented customers
head(segment)
# Step 5: Visualize RFM Segments
# Recency by segment
rfm_plot_median_recency(segment, sort = TRUE)
# Monetary by segment
rfm_plot_median_monetary(segment, sort = TRUE)
# Frequency by segment
rfm_plot_median_frequency(segment, sort = TRUE)
#Visualization of the 3 rfm variables
data_clean_rfm = data
data_clean_rfm = data_clean_rfm$customer_id != 9999999999
# Revenue histogram
hist(data_clean_rfm$revenue, main = "Histogram of Revenue", col = "blue", border = "black")
#Visualization of the 3 rfm variables
data_clean_rfm <- data[data$customer_id != 9999999999, ]
# Revenue histogram
hist(data_clean_rfm$revenue, main = "Histogram of Revenue", col = "blue", border = "black")
# Check for NAs
sum(is.na(data_clean_rfm$revenue))      # Count NAs in revenue
# Customer ID bar plot - Delete later, useless, including the NA checks
cust_freq <- table(data_clean_rfm$customer_id)
# Filter to only those with frequency >= 10
cust_freq_filtered <- cust_freq[cust_freq >= 35]
barplot(cust_freq_filtered, main = "Customer ID Distribution", col = "blue", las = 2, ylim = c(0, 80))
# Date bar plot
barplot(table(data_clean_rfm$date), main = "Date Distribution", col = "blue")
sum(is.na(data_clean_rfm$date))         # Count NAs in date
#CAN BE SEEN no NAs and also no negative variables, can proceed with the RFM model running
#RFM model
analysis_date = as.Date("2024-12-31")
# Run the RFM analysis
rfm_result <- rfm_table_order(data_clean_rfm,
customer_id,
date,
revenue,
analysis_date = analysis_date)
# Step 3: Visualize RFM Results
# Heatmap visualization of RFM scores
rfm_plot_heatmap(rfm_result)
# Bar chart of RFM scores
rfm_bar_chart(rfm_result)
# Step 4: Segment Customers based on RFM scores
# Define RFM segment categories
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# Set upper and lower bounds for Recency, Frequency, and Monetary
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# Apply segments based on RFM scores
segment <- rfm_segment(rfm_result,
segment_names,
recency_lower, recency_upper,
frequency_lower, frequency_upper,
monetary_lower, monetary_upper)
# View the segmented customers
head(segment)
# Step 5: Visualize RFM Segments
# Recency by segment
rfm_plot_median_recency(segment, sort = TRUE)
# Monetary by segment
rfm_plot_median_monetary(segment, sort = TRUE)
# Frequency by segment
rfm_plot_median_frequency(segment, sort = TRUE)
table(rfm_result$frequency_score)
View(rfm_result)
View(rfm_result)
table(segment$segment)
View(rfm_result)
table(rfm_result$rfm$frequency_score)
View(rfm_result)
summary(rfm_result$rfm$monetary_score)
summary(rfm_result$rfm$recency_score)
summary(rfm_result$rfm$frequency_score)
hist(rfm_result$rfm$recency_score)
hist(rfm_result$rfm$frequency_score)
hist(rfm_result$rfm$monetary_score)
#RFM model
analysis_date = as.Date("2024-12-31")
# Run the RFM analysis
rfm_result <- rfm_table_order(data_clean_rfm,
customer_id,
date,
revenue,
analysis_date = analysis_date)
# Step 3: Visualize RFM Results
# Heatmap visualization of RFM scores
rfm_plot_heatmap(rfm_result)
# Bar chart of RFM scores
rfm_bar_chart(rfm_result)
# Step 4: Segment Customers based on RFM scores
# Define RFM segment categories
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# Set upper and lower bounds for Recency, Frequency, and Monetary
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# Apply segments based on RFM scores
segment <- rfm_segment(rfm_result,
segment_names,
recency_lower, recency_upper,
frequency_lower, frequency_upper,
monetary_lower, monetary_upper)
# View the segmented customers
head(segment)
table(segment$segment)
table(rfm_result$rfm$frequency_score)
summary(rfm_result$rfm$monetary_score)
summary(rfm_result$rfm$recency_score)
summary(rfm_result$rfm$frequency_score)
hist(rfm_result$rfm$recency_score)
hist(rfm_result$rfm$frequency_score)
hist(rfm_result$rfm$monetary_score)
# Step 5: Visualize RFM Segments
# Recency by segment
rfm_plot_median_recency(segment, sort = TRUE)
# Monetary by segment
rfm_plot_median_monetary(segment, sort = TRUE)
# Frequency by segment
rfm_plot_median_frequency(segment, sort = TRUE)
summary(data_clean_rfm)
library(dplyr)
rfm_prepared <- data_clean_rfm %>%
select(date, order_id, customer_id, revenue) %>%  # keep only necessary columns
group_by(order_id, customer_id, date) %>%         # group by order and customer (date included if orders have dates)
summarise(revenue = sum(revenue, na.rm = TRUE)) %>% # sum revenue for each group
ungroup()
library(dplyr)
rfm_prepared <- data_clean_rfm %>%
dplyr::select(date, order_id, customer_id, revenue) %>%  # keep only necessary columns
group_by(order_id, customer_id, date) %>%         # group by order and customer (date included if orders have dates)
summarise(revenue = sum(revenue, na.rm = TRUE)) %>% # sum revenue for each group
ungroup()
View(rfm_prepared)
rfm_prepared <- data_clean_rfm %>%
dplyr::select(date, order_id, customer_id, revenue) %>%  # keep only necessary columns
group_by(order_id, customer_id, date) %>%         # group by order and customer (date included if orders have dates)
summarise(revenue = sum(revenue, na.rm = TRUE)) %>% # sum revenue for each group
View(rfm_prepared)
ungroup()
length(unique(data_clean_rfm$order_id))
length(unique(data_clean_rfm$customer_id))
length(unique(data_clean_rfm$date))
write.csv(data_clean_rfm)
write.csv(data_clean_rfm,"kungfufighting.csv")
