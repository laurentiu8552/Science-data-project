head(cal.cbs.gamma.test[, c(13:14)])
mae_pareto <- mae(cal.cbs.gamma.test$CLV.real, cal.cbs.gamma.test$CLV.pred.pareto)
Library (Metrics)
Library(Metrics)
library(metrics)
library(metrics)
library(tidyverse)
library(caret)
library(caTools)
library(DataExplorer)
library(dplyr)
library(ggplot2)
library(visdat)
library(recipes)
library(rsample)
library(forecast)
library(MASS)
library(rfm)
library(ggplot2)
library(DataExplorer)
library(GGally)
library(BTYD)
library(plyr)
library(ggplot2)
library(lubridate)
library(reshape2)
library(BTYDplus)
library(ggpubr)
library(Hmisc)
library(tibble)
library(Metrics)
library(magrittr)
library(dplyr)
library(car)
library(rfm)
library(kableExtra)
library(reshape2)
library(tidyverse)
library(knitr)
library(flexclust)
library(clue)
library(openxlsx)
library(tidygeocoder)
library(sf)
library(skimr)
library(readxl)
# Load the dataset
data <- read_excel("jysk_case_competition_final_Laur_manual_edit.xlsx")
data <- data[!duplicated(data),]
# Check the structure of the dataset to see variable types
str(data)
# Convert the 'date' column to Date type
data$date <- as.Date(data$date, format = "%d.%m.%Y")
# Convert all non-numeric columns (besides 'date') to factors
data[] <- lapply(data, function(x) if(is.character(x)) as.factor(x) else x)
# Check the structure of the dataset to confirm the changes
str(data)
# Rename the column 'order_value_ex_vat_ex_freight' to 'Revenue'
data <- data %>%
dplyr::rename(revenue = order_value_ex_vat_ex_freight)
data <- data %>%
filter(!is.na(customer_id) & revenue > 0)
sum(is.na(data))
data <- data[complete.cases(data), ]
sum(is.na(data))
str(data)
##### Getting the newcomer variable
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
frequency = n(),  # Number of orders
recency = as.numeric(max(date) - min(date)),  # Days between first & last order
mean_monetary_value = mean(revenue),  # Average revenue per order
total_revenue = sum(revenue),  # Total revenue per customer
date = max(date)  # Most recent order date
) %>%
ungroup()
#### Adding the newcomer variable
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = if_else(frequency == 1, 1, 0))
# Display the first few rows of CLV data
head(clv_data)
# Optionally, you can visualize the metrics to explore patterns.
# Let's plot the frequency and recency
library(ggplot2)
# Frequency plot
ggplot(clv_data, aes(x = frequency)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = "Distribution of Order Frequency", x = "Number of Orders", y = "Count")
# Recency plot
ggplot(clv_data, aes(x = recency)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Recency (Days)", x = "Days Since First Order", y = "Count")
# Mean Monetary Value plot
ggplot(clv_data, aes(x = mean_monetary_value)) +
geom_histogram(binwidth = 10, fill = "orange", color = "black") +
labs(title = "Distribution of Mean Monetary Value", x = "Average Revenue per Order", y = "Count")
summary(clv_data)
# #### splitting the data
# # Filter training data based on date range
# train_data <- clv_data %>%
#   filter(date >= "2024-01-01" & date <= "2024-09-01")
#
# # Filter test data for the remaining dates
# test_data <- clv_data %>%
#   filter(date > "2024-09-01")
#
# str(clv_data)
#### 1 model
#install.packages("BTYD")
library(BTYD)
# Select subset
clv_subset <- mutate(clv_data[,c(1,4,6)], date =as.Date(date)) # gets only needed columns
names(clv_subset) <- c("cust", "sales", "date") # model functions expect these names
length(unique(clv_subset$cust)) # 669 unique customers left
data_btyd <- dc.MergeTransactionsOnSameDate(clv_subset)
#### BTYD prepping data final
#### Create calibration matrix using BTYD package
end.of.cal.period <- as.Date("2024-09-01") # Set the end date for the calibration period
# Transform the transaction log data to frequency and recency matrices for the calibration period
data_btyd_recency <- dc.ElogToCbsCbt(data_btyd, per="week", T.cal = end.of.cal.period,  statistic = "freq")
#### Create calibration matrix using BTYD package
end.of.cal.period <- as.Date("2024-09-01") # Set the end date for the calibration period
# Transform the transaction log data to frequency and recency matrices for the calibration period
data_btyd_recency <- dc.ElogToCbsCbt(data_btyd, per="week", T.cal = end.of.cal.period,  statistic = "freq")
#### Create calibration matrix using BTYD package
end.of.cal.period <- as.Date("2024-09-01") # Set the end date for the calibration period
# Transform the transaction log data to frequency and recency matrices for the calibration period
data_btyd_recency <- dc.ElogToCbsCbt(data_btyd, per="day", T.cal = end.of.cal.period,  statistic = "freq")
library(BTYD)
str(data.to.correct)
end.of.cal.period <- as.Date("2024-09-01") # Set the end date for the calibration period
# Transform the transaction log data to frequency and recency matrices for the calibration period
data_btyd_recency <- dc.ElogToCbsCbt(data_btyd, per="day", T.cal = end.of.cal.period,  statistic = "freq")
View(clv_data)
setwd("C:/Users/babil/OneDrive/Desktop/customer analytics/CA_lectureCodes/CLV")
# Required libraries
library(ggplot2)
library(DataExplorer)
library(GGally)
library(BTYD)
library(plyr)
library(ggplot2)
library(lubridate)
library(reshape2)
library(BTYDplus)
library(ggpubr)
library(Hmisc)
library(tibble)
library(Metrics)
library(magrittr)
library(dplyr)
library(car)
library(rfm)
library(kableExtra)
library(reshape2)
library(tidyverse)
library(knitr)
library(flexclust)
library(clue)
library(openxlsx)
# Data
data <- read.csv2("App2data.csv")
data$X <- NULL
View(data)
variable.names(data)
# Descriptive statistics -------------------------------------------------------
# Number of orders per year
data$date_year <- gsub("-.*","", data$date)
ggplot(data) +
geom_bar(aes(x = date_year), colour = "grey 20", fill = "grey 80") +
ggtitle("Orders per year") +
xlab("Year") +
ylab("Number of orders") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=14, face = "plain"),
axis.title=element_text(size=14, face = "plain"),
title = element_text(size=14, face = "plain"))
# Number of orders per customer (truncate +15 orders)
data$user_jobs_truncate <- data$user_jobs
data[data$user_jobs_truncate > 15, 'user_jobs_truncate'] = 15
ggplot() +
geom_bar(aes(x = tapply(data$user_jobs_truncate, data$user_id, max)),
colour = "grey 20", fill = "grey 80") +
ggtitle("Orders per customer") +
xlab("Total number of orders") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=14, face = "plain"),
axis.title=element_text(size=14, face = "plain"),
title = element_text(size=14, face = "plain"))
# Days since last job (truncate +100) (days between orders)
daysdata <- subset(data[,c(1,12)])
daysdata$days_since_last_job <- as.numeric(daysdata$days_since_last_job) # to remove the text category "first .."- we get NA
daysdata <- na.omit(daysdata) # now we also remove the NA's
daysdatamean <- (tapply(daysdata$days_since_last_job, daysdata$user_id, mean)) # column 12 is not numeric
daysdatamean <- data.frame(user_id = names(daysdatamean ), mean_days = daysdatamean)
daysdatamean$days_since_last_job_truncate <- daysdatamean$mean_days
daysdatamean[daysdatamean$days_since_last_job_truncate > 150, 'days_since_last_job_truncate'] = 150
ggplot(daysdatamean) +
geom_histogram(aes(x = days_since_last_job_truncate), binwidth=5, colour = "grey 20", fill = "grey 80") +
ggtitle("Days between orders") +
xlab("Average days between orders") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=17, face = "plain"),
axis.title=element_text(size=17, face = "plain"),
title = element_text(size=16, face = "plain"))
# Items in basket (truncate +100)
itemsdata <- tapply(data$items_in_basket, data$user_id, mean)
itemsdata <- data.frame(user_id = names(itemsdata), mean_items = itemsdata)
itemsdata$items_in_basket_truncate <- itemsdata$mean_items
itemsdata[itemsdata$items_in_basket_truncate > 100, 'items_in_basket_truncate'] = 100
ggplot(itemsdata) +
geom_histogram(aes(x = items_in_basket_truncate), binwidth=5, colour = "grey 20", fill = "grey 80") +
ggtitle("Items") +
xlab("Average number of items per order") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=17, face = "plain"),
axis.title=element_text(size=17, face = "plain"),
title = element_text(size=16, face = "plain"))
# Average rating by each customer
datarating <- subset(data[,c(1,18)])
datarating$delivery_guy_rating  = as.numeric(datarating$delivery_guy_rating) # to easily transform "Not rated" in NA
datarating = na.omit(datarating)
ggplot() + geom_histogram(aes(x = tapply(datarating$delivery_guy_rating, datarating$user_id, mean)), binwidth=0.5, colour = "grey 20", fill = "grey 80") +
ggtitle("Delivery rating") +
xlab("Average rating of the delivery") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=17, face = "plain"),
axis.title=element_text(size=17, face = "plain"),
title = element_text(size=16, face = "plain"))
# Gender
data_unique <- data[!duplicated(data$user_id), ]
ggplot(data_unique) + geom_bar(aes(x = user_gender), colour = "grey 20", fill = "grey 80") +
ggtitle("Gender") +
xlab("Gender") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=17, face = "plain"),
axis.title=element_text(size=17, face = "plain"),
title = element_text(size=16, face = "plain"))
# Age
ggplot(data_unique) + geom_histogram(aes(x = user_age), binwidth=5,  colour = "grey 20", fill = "grey 80") +
ggtitle("Age") +
xlab("Current age") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=17, face = "plain"),
axis.title=element_text(size=17, face = "plain"),
title = element_text(size=16, face = "plain"))
# Region
data_unique$region_name[data_unique$region_name=="Himmerland-Midtjylland"] <-"Midtylland"
data_unique$region_name[data_unique$region_name=="Horsens-Silkeborg"] <-"Silkeborg"
data_unique$region_name[data_unique$region_name=="Midt-Vestjylland"] <-"Vestjylland"
ggplot(data_unique) + geom_bar(aes(x = forcats::fct_infreq(as.character(region_name))), colour = "grey 20", fill = "grey 80") +
ggtitle("Location") +
xlab("Location") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=12, face = "plain"),
axis.title=element_text(size=15, face = "plain"),
title = element_text(size=16, face = "plain")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Orders per month:
data$completed_month <- data$date
# remove everything after the month
data$completed_month <- substring(data$date,1,7) # only need sign 1-7
table(data$completed_month) # done
ggplot(data) + geom_bar(aes(x = completed_month), colour = "grey 20", fill = "grey 80") +
ggtitle("Number of order per month") +
xlab("Month") +
ylab("Number of orders") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=11, face = "plain"),
axis.title=element_text(size=12, face = "plain"),
title = element_text(size=12, face = "plain")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Newly acquired customers each month
data_1 <- data[c(9,33)]
data_1 <- na.omit(data_1)
data_acquired <- data_1[data_1$user_jobs == 1,]
data_acquired$month <- substring(data_acquired$date,1,7)
ggplot(data_acquired) + geom_bar(aes(x = month), binwidth=1, colour = "grey 20", fill = "grey 80") +
ggtitle("Number of customers aquired per month") +
xlab("Month") +
ylab("Number of customers") +
theme(panel.background =  element_rect( fill = "grey 94")) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=11, face = "plain"),
axis.title=element_text(size=12, face = "plain"),
title = element_text(size=12, face = "plain")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
frequency = n(),  # Number of orders
recency = as.numeric(max(date) - min(date)),  # Days between first & last order
mean_monetary_value = revenue,  # Average revenue per order
date = date  # Most recent order date
) %>%
ungroup()
setwd("~/GitHub/CollabDANIELE")
library(tidyverse)
library(caret)
library(caTools)
library(DataExplorer)
library(dplyr)
library(ggplot2)
library(visdat)
library(recipes)
library(rsample)
library(forecast)
library(MASS)
library(rfm)
library(ggplot2)
library(DataExplorer)
library(GGally)
library(BTYD)
library(plyr)
library(ggplot2)
library(lubridate)
library(reshape2)
library(BTYDplus)
library(ggpubr)
library(Hmisc)
library(tibble)
library(Metrics)
library(magrittr)
library(dplyr)
library(car)
library(rfm)
library(kableExtra)
library(reshape2)
library(tidyverse)
library(knitr)
library(flexclust)
library(clue)
library(openxlsx)
library(tidygeocoder)
library(sf)
library(skimr)
library(readxl)
# Load the dataset
data <- read_excel("jysk_case_competition_final_Laur_manual_edit.xlsx")
data <- data[!duplicated(data),]
# Check the structure of the dataset to see variable types
str(data)
# Convert the 'date' column to Date type
data$date <- as.Date(data$date, format = "%d.%m.%Y")
# Convert all non-numeric columns (besides 'date') to factors
data[] <- lapply(data, function(x) if(is.character(x)) as.factor(x) else x)
# Check the structure of the dataset to confirm the changes
str(data)
# Rename the column 'order_value_ex_vat_ex_freight' to 'Revenue'
data <- data %>%
dplyr::rename(revenue = order_value_ex_vat_ex_freight)
data <- data %>%
filter(!is.na(customer_id) & revenue > 0)
sum(is.na(data))
data <- data[complete.cases(data), ]
sum(is.na(data))
str(data)
##### Getting the newcomer variable
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
frequency = n(),  # Number of orders
recency = as.numeric(max(date) - min(date)),  # Days between first & last order
mean_monetary_value = revenue,  # Average revenue per order
date = date  # Most recent order date
) %>%
ungroup()
#### Adding the newcomer variable
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = if_else(frequency == 1, 1, 0))
# Display the first few rows of CLV data
head(clv_data)
# Optionally, you can visualize the metrics to explore patterns.
# Let's plot the frequency and recency
library(ggplot2)
# Frequency plot
ggplot(clv_data, aes(x = frequency)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = "Distribution of Order Frequency", x = "Number of Orders", y = "Count")
# Recency plot
ggplot(clv_data, aes(x = recency)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Recency (Days)", x = "Days Since First Order", y = "Count")
# Mean Monetary Value plot
ggplot(clv_data, aes(x = mean_monetary_value)) +
geom_histogram(binwidth = 10, fill = "orange", color = "black") +
labs(title = "Distribution of Mean Monetary Value", x = "Average Revenue per Order", y = "Count")
summary(clv_data)
# #### splitting the data
# # Filter training data based on date range
# train_data <- clv_data %>%
#   filter(date >= "2024-01-01" & date <= "2024-09-01")
#
# # Filter test data for the remaining dates
# test_data <- clv_data %>%
#   filter(date > "2024-09-01")
#
# str(clv_data)
#### 1 model
#install.packages("BTYD")
library(BTYD)
# Select subset
clv_subset <- mutate(clv_data[,c(1,4,6)], date =as.Date(date)) # gets only needed columns
View(clv_data)
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
mean_monetary_value = revenue,  # Average revenue per order
date = date  # Most recent order date
) %>%
ungroup()
#### Adding the newcomer variable
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = if_else(frequency == 1, 1, 0))
clv_data <- clv_data(drop(frequency)
clv_data <- clv_data[, !colnames(clv_data) %in% "frequency"]
View(clv_data)
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
frequency = n(),  # Number of orders
mean_monetary_value = revenue,  # Average revenue per order
date = date  # Most recent order date
) %>%
ungroup()
#### Adding the newcomer variable
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = if_else(frequency == 1, 1, 0))
library(dplyr)
clv_data <- clv_data %>% select(-frequency)
library(dplyr)
clv_data <- clv_data %>% dplyr::select(-frequency)
View(clv_data)
View(clv_data)
# Optionally, you can visualize the metrics to explore patterns.
# Let's plot the frequency and recency
library(ggplot2)
# Frequency plot
ggplot(clv_data, aes(x = frequency)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = "Distribution of Order Frequency", x = "Number of Orders", y = "Count")
View(clv_data)
View(clv_data)
library(dplyr)
library(lubridate)
### CLV model
# Calculate CLV metrics for the training data
clv_data <- data %>%
group_by(customer_id) %>%
dplyr::summarise(
frequency = n(),  # Number of orders
mean_monetary_value = revenue,  # Average revenue per order
date = date  # Most recent order date
) %>%
ungroup()
#### Adding the newcomer variable
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = if_else(frequency == 1, 1, 0))
# Clean for newcomers after training period (2021-02-15)
data$newcomer <- data$user_jobs
clv_data$newcomer[clv_data$frequency == 1 & clv_data$date >=as.Date("2024-09-01")] <- "true"
View(clv_data)
clv_data <- clv_data %>%
mutate(newcomer = ifelse(frequency == 1 & date > as.Date("2024-09-01"), 1, 0))
View(clv_data)
library(dplyr)
clv_data <- clv_data %>%
mutate(newcomer = ifelse(frequency == 1 & date > as.Date("2024-09-01"), 1, 0))
clv_data <- clv_data %>% dplyr::select(-frequency)
View(clv_data)
